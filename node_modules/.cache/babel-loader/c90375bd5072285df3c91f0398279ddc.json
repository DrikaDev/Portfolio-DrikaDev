{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBoundedIndex = exports.getDefaultSlideIndex = exports.getPrevMoveIndex = exports.getNextMoveIndex = exports.isSlideVisible = void 0;\n\nconst default_controls_1 = require(\"./default-controls\");\n\nconst types_1 = require(\"./types\");\n\nconst isSlideVisible = (currentSlide, indexToCheck, slidesToShow, cellAlign) => {\n  // The addition or subtraction of constants (1 , 0.5) in the following\n  // calculations are accounting for the fact that a slide will be visible even\n  // after the position associated with its index is off-screen. For example,\n  // with cellAlign=\"left\", slidesToShow=1 and indexToCheck=0,\n  // if the currentSlide is set to 0.99, both (a sliver of) slide 0 and slide 1\n  // will be visible at the same time, even though the position we associate\n  // with index 0, its leftmost edge, is off-screen.\n  if (cellAlign === types_1.Alignment.Left) {\n    return indexToCheck < currentSlide + slidesToShow && indexToCheck > currentSlide - 1;\n  }\n\n  if (cellAlign === types_1.Alignment.Center) {\n    return indexToCheck > currentSlide - slidesToShow / 2 - 0.5 && indexToCheck <= currentSlide || indexToCheck > currentSlide && indexToCheck < currentSlide + slidesToShow / 2 + 0.5;\n  }\n\n  if (cellAlign === types_1.Alignment.Right) {\n    return indexToCheck < currentSlide + 1 && indexToCheck > currentSlide - slidesToShow;\n  }\n\n  return false;\n};\n\nexports.isSlideVisible = isSlideVisible;\n\nconst getNextMoveIndex = (scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  } // Quit early if we're already as far right as we can go\n\n\n  if (currentSlide >= slideCount - 1 || cellAlign === types_1.Alignment.Left && currentSlide >= slideCount - slidesToShow) {\n    return currentSlide;\n  }\n\n  if (scrollMode === types_1.ScrollMode.remainder && cellAlign === types_1.Alignment.Left) {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\n\nexports.getNextMoveIndex = getNextMoveIndex;\n\nconst getPrevMoveIndex = (scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  } // Quit early if we're already as far left as we can go\n\n\n  if (currentSlide <= 0 || cellAlign === types_1.Alignment.Right && currentSlide <= slidesToShow - 1) {\n    return currentSlide;\n  }\n\n  if (scrollMode === types_1.ScrollMode.remainder && cellAlign === types_1.Alignment.Right) {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\n\nexports.getPrevMoveIndex = getPrevMoveIndex;\n\nconst getDefaultSlideIndex = (slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode) => {\n  if (slideIndex !== undefined) {\n    return slideIndex;\n  }\n\n  const dotIndexes = (0, default_controls_1.getDotIndexes)(slideCount, slidesToScroll, scrollMode, slidesToShow, false, cellAlign);\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\n\nexports.getDefaultSlideIndex = getDefaultSlideIndex;\n/**\n * Boils down an unbounded index (-Infinity < index < Infinity) to a bounded one\n * (0 â‰¤ index < slideCount)\n */\n\nconst getBoundedIndex = (rawIndex, slideCount) => {\n  return (rawIndex % slideCount + slideCount) % slideCount;\n};\n\nexports.getBoundedIndex = getBoundedIndex;","map":{"version":3,"mappings":"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","names":["isSlideVisible","currentSlide","indexToCheck","slidesToShow","cellAlign","types_1","Left","Center","Right","exports","getNextMoveIndex","scrollMode","wrapAround","slideCount","slidesToScroll","remainder","Math","min","getPrevMoveIndex","max","getDefaultSlideIndex","slideIndex","autoplayReverse","undefined","dotIndexes","length","getBoundedIndex","rawIndex"],"sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}