{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTween = void 0;\n\nconst react_1 = require(\"react\");\n/**\n * Provides an interpolated value, beginning at 0 and ending at 1, based on a\n * provided duration and animation timing function.\n */\n\n\nconst useTween = (durationMs, easingFunction, // navigationNum is an combination of numbers that are stable when the\n// animation should not be running or should continue running, but change when\n// the animation should start running. In practice, this is a combination of\n// the animation distance and slide index.\nnavigationNum, shouldInterrupt) => {\n  const [normalizedTimeRaw, setNormalizedTime] = (0, react_1.useState)(1);\n  const startTime = (0, react_1.useRef)(Date.now());\n  const rAF = (0, react_1.useRef)();\n  const isFirstRender = (0, react_1.useRef)(true);\n  const lastNavigationNum = (0, react_1.useRef)(null); // Detect on the first render following navigation if the animation should\n  // be running. If we wait for the useEffect, the first render will flash with\n  // the slide in its destination position, before the animation triggers,\n  // sending it back to the position of the first frame of the animation. This\n  // approach is done in place of a useLayoutEffect, which has issues with SSR.\n\n  const normalizedTime = lastNavigationNum.current === null || lastNavigationNum.current === navigationNum || shouldInterrupt ? normalizedTimeRaw : 0; // 0 here indicates the animation has begun\n\n  (0, react_1.useEffect)(() => {\n    lastNavigationNum.current = navigationNum; // Skip the first render as we don't want to trigger the animation right off\n    // the bat\n\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (shouldInterrupt) {\n      return;\n    }\n\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime = Math.min(1, (currentTime - startTime.current) / durationMs);\n        setNormalizedTime(normalizedTime);\n\n        if (normalizedTime < 1) {\n          tick();\n        } else {\n          // Clean up so we can use this value to determine if the most recent\n          // animation completed\n          rAF.current = undefined;\n        }\n      });\n    };\n\n    tick();\n    return () => {\n      // If the most recent animation did not complete, cut it short and reset\n      // the animation\n      if (rAF.current !== undefined) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime)\n  };\n};\n\nexports.useTween = useTween;","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;;;;AAIO,MAAMA,QAAQ,GAAG,CACtBC,UADsB,EAEtBC,cAFsB,EAGtB;AACA;AACA;AACA;AACAC,aAPsB,EAQtBC,eARsB,KASpB;EACF,MAAM,CAACC,iBAAD,EAAoBC,iBAApB,IAAyC,sBAAS,CAAT,CAA/C;EACA,MAAMC,SAAS,GAAG,oBAAOC,IAAI,CAACC,GAAL,EAAP,CAAlB;EACA,MAAMC,GAAG,GAAG,qBAAZ;EACA,MAAMC,aAAa,GAAG,oBAAO,IAAP,CAAtB;EACA,MAAMC,iBAAiB,GAAG,oBAAsB,IAAtB,CAA1B,CALE,CAOF;EACA;EACA;EACA;EACA;;EACA,MAAMC,cAAc,GAClBD,iBAAiB,CAACE,OAAlB,KAA8B,IAA9B,IACAF,iBAAiB,CAACE,OAAlB,KAA8BX,aAD9B,IAEAC,eAFA,GAGIC,iBAHJ,GAII,CALN,CAZE,CAiBO;;EAET,uBAAU,MAAK;IACbO,iBAAiB,CAACE,OAAlB,GAA4BX,aAA5B,CADa,CAGb;IACA;;IACA,IAAIQ,aAAa,CAACG,OAAlB,EAA2B;MACzBH,aAAa,CAACG,OAAd,GAAwB,KAAxB;MACA;IACD;;IAED,IAAIV,eAAJ,EAAqB;MACnB;IACD;;IAEDG,SAAS,CAACO,OAAV,GAAoBN,IAAI,CAACC,GAAL,EAApB;IACAH,iBAAiB,CAAC,CAAD,CAAjB;;IAEA,MAAMS,IAAI,GAAG,MAAK;MAChBL,GAAG,CAACI,OAAJ,GAAcE,qBAAqB,CAAC,MAAK;QACvC,MAAMC,WAAW,GAAGT,IAAI,CAACC,GAAL,EAApB;QACA,MAAMI,cAAc,GAAGK,IAAI,CAACC,GAAL,CACrB,CADqB,EAErB,CAACF,WAAW,GAAGV,SAAS,CAACO,OAAzB,IAAoCb,UAFf,CAAvB;QAIAK,iBAAiB,CAACO,cAAD,CAAjB;;QAEA,IAAIA,cAAc,GAAG,CAArB,EAAwB;UACtBE,IAAI;QACL,CAFD,MAEO;UACL;UACA;UACAL,GAAG,CAACI,OAAJ,GAAcM,SAAd;QACD;MACF,CAfkC,CAAnC;IAgBD,CAjBD;;IAkBAL,IAAI;IAEJ,OAAO,MAAK;MACV;MACA;MACA,IAAIL,GAAG,CAACI,OAAJ,KAAgBM,SAApB,EAA+B;QAC7BC,oBAAoB,CAACX,GAAG,CAACI,OAAL,CAApB;QACAR,iBAAiB,CAAC,CAAD,CAAjB;MACD;IACF,CAPD;EAQD,CA7CD,EA6CG,CAACH,aAAD,EAAgBF,UAAhB,EAA4BG,eAA5B,CA7CH;EA+CA,OAAO;IACLkB,WAAW,EAAET,cAAc,KAAK,CAD3B;IAELU,KAAK,EAAErB,cAAc,CAACW,cAAD;EAFhB,CAAP;AAID,CA/EM;;AAAMW,mBAAQxB,QAAR","names":["useTween","durationMs","easingFunction","navigationNum","shouldInterrupt","normalizedTimeRaw","setNormalizedTime","startTime","Date","now","rAF","isFirstRender","lastNavigationNum","normalizedTime","current","tick","requestAnimationFrame","currentTime","Math","min","undefined","cancelAnimationFrame","isAnimating","value","exports"],"sources":["../../src/hooks/use-tween.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}