{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useStateWithRef = void 0;\n\nconst react_1 = require(\"react\");\n/**\n * Like useState, but also returns a ref that's always instantly updated.\n *\n * This is useful in two cases:\n *\n * 1. You need to both force a re-render when a variable changes, and\n *    also avoid re-running side effects (for example, a network call), even\n *    before the state fully updates for the component.\n * 2. Multiple callbacks need to modify the same object or array before the\n *    state updates. For example, if one callback tries to append 4 to\n *    `[1, 2, 3]` and another tries to append 5, we may end up with only\n *    `[1, 2, 3, 5]` instead of `[1, 2, 3, 4, 5]`\n */\n\n\nconst useStateWithRef = initialState => {\n  const [value, setValue] = (0, react_1.useState)(initialState); // Need to explicitly type this out, or the overloads can confuse the\n  // compiler to think that this might be a React Component ref\n\n  const valueRef = (0, react_1.useRef)(initialState);\n  const setValueAndRef = (0, react_1.useCallback)(newValue => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n  return [value, setValueAndRef, valueRef];\n};\n\nexports.useStateWithRef = useStateWithRef;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;AAaO,MAAMA,eAAe,GAC1BC,YAD6B,IAEsB;EACnD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,sBAASF,YAAT,CAA1B,CADmD,CAEnD;EACA;;EACA,MAAMG,QAAQ,GAAG,oBAAUH,YAAV,CAAjB;EAEA,MAAMI,cAAc,GAAG,yBAAaC,QAAD,IAAgB;IACjDF,QAAQ,CAACG,OAAT,GAAmBD,QAAnB;IACAH,QAAQ,CAACG,QAAD,CAAR;EACD,CAHsB,EAGpB,EAHoB,CAAvB;EAKA,OAAO,CAACJ,KAAD,EAAQG,cAAR,EAAwBD,QAAxB,CAAP;AACD,CAdM;;AAAMI,0BAAeR,eAAf","names":["useStateWithRef","initialState","value","setValue","valueRef","setValueAndRef","newValue","current","exports"],"sources":["../../src/hooks/use-state-with-ref.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}