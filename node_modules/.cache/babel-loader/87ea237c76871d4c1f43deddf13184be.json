{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SliderList = exports.getPercentOffsetForSlide = void 0;\n\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nconst react_1 = __importDefault(require(\"react\"));\n\nconst default_controls_1 = require(\"./default-controls\");\n\nconst use_tween_1 = require(\"./hooks/use-tween\");\n\nconst types_1 = require(\"./types\");\n\nconst getPercentOffsetForSlide = (currentSlide, slideCount, slidesToShow, cellAlign, wrapAround) => {\n  // When wrapAround is enabled, we show the slides 3 times\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount; // When wrap is on, -33.33% puts us right on the center, true set of slides\n  // (the left and right sets are clones meant to avoid visual gaps)\n\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n\n  if (cellAlign === types_1.Alignment.Right && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n\n  if (cellAlign === types_1.Alignment.Center && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1; // Half of excess is on left and half is on right when centered\n\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n\n  const currentSlideOffsetFrom0 = 100 / renderedSlideCount * currentSlide;\n  return slide0Offset - currentSlideOffsetFrom0;\n};\n\nexports.getPercentOffsetForSlide = getPercentOffsetForSlide;\nexports.SliderList = react_1.default.forwardRef((_ref, forwardedRef) => {\n  let {\n    animation,\n    animationDistance,\n    cellAlign,\n    children,\n    currentSlide,\n    disableAnimation,\n    disableEdgeSwiping,\n    draggedOffset,\n    easing,\n    edgeEasing,\n    isDragging,\n    scrollMode,\n    slideCount,\n    slidesToScroll,\n    slidesToShow,\n    speed,\n    wrapAround\n  } = _ref;\n  // When wrapAround is enabled, we show the slides 3 times\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const listVisibleWidth = `${renderedSlideCount * 100 / slidesToShow}%`;\n  const percentOffsetForSlideProps = [slideCount, slidesToShow, cellAlign, wrapAround]; // We recycle dot index generation to determine the leftmost and rightmost\n  // indices used, to be used in calculating the x-translation values we need\n  // to limit to or when edgeEasing should be used.\n\n  const dotIndexes = (0, default_controls_1.getDotIndexes)(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n  let clampedDraggedOffset = `${draggedOffset}px`;\n\n  if (isDragging && disableEdgeSwiping && !wrapAround) {\n    const clampOffsets = [dotIndexes[0], dotIndexes[dotIndexes.length - 1]].map(index => (0, exports.getPercentOffsetForSlide)(index, ...percentOffsetForSlideProps)); // Offsets are seemingly backwards because the rightmost slide creates\n    // the most negative translate value\n\n    clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n  }\n\n  const slideBasedOffset = (0, exports.getPercentOffsetForSlide)(currentSlide, ...percentOffsetForSlideProps);\n  const isEdgeEasing = !disableEdgeSwiping && !wrapAround && (currentSlide === dotIndexes[0] && animationDistance < 0 || currentSlide === dotIndexes[dotIndexes.length - 1] && animationDistance > 0);\n  const {\n    value: transition,\n    isAnimating\n  } = (0, use_tween_1.useTween)(speed, !isEdgeEasing ? easing : edgeEasing, // animationDistance is assumed to be unique enough that it can be used to\n  // detect when a new animation should start. This is used in addition to\n  // currentSlide because some animations, such as those with edgeEasing, do\n  // not occur due to a change in value of currentSlide\n  currentSlide + animationDistance, isDragging || disableAnimation || animation === 'fade'); // Return undefined if the transform would be 0 pixels since transforms can\n  // cause flickering in chrome.\n\n  let positioning;\n\n  if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n    if (isDragging) {\n      positioning = `translateX(${clampedDraggedOffset})`;\n    } else {\n      const transitionOffset = isAnimating ? (1 - transition) * animationDistance : 0;\n      positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n    }\n  }\n\n  return (0, jsx_runtime_1.jsx)(\"div\", Object.assign({\n    ref: forwardedRef,\n    className: \"slider-list\",\n    style: {\n      width: listVisibleWidth,\n      textAlign: 'left',\n      userSelect: 'auto',\n      transform: positioning,\n      display: 'flex'\n    }\n  }, {\n    children: children\n  }));\n});\nexports.SliderList.displayName = 'SliderList';","map":{"version":3,"mappings":"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","names":["getPercentOffsetForSlide","currentSlide","slideCount","slidesToShow","cellAlign","wrapAround","renderedSlideCount","singleSlidePercentOfWhole","slide0Offset","types_1","Right","excessSlides","Center","excessLeftSlides","currentSlideOffsetFrom0","exports","react_1","forwardRef","forwardedRef","animation","animationDistance","children","disableAnimation","disableEdgeSwiping","draggedOffset","easing","edgeEasing","isDragging","scrollMode","slidesToScroll","speed","listVisibleWidth","percentOffsetForSlideProps","dotIndexes","clampedDraggedOffset","clampOffsets","length","map","index","slideBasedOffset","isEdgeEasing","value","transition","isAnimating","positioning","transitionOffset","ref","className","style","width","textAlign","userSelect","transform","display","displayName"],"sources":["../src/slider-list.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}