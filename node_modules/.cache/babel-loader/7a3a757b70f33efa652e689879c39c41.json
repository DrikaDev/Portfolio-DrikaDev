{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFrameHeight = void 0;\n\nconst react_1 = require(\"react\");\n\nconst use_state_with_ref_1 = require(\"./use-state-with-ref\");\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\n\n\nconst useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] = (0, use_state_with_ref_1.useStateWithRef)([]); // Whether we've received heights of all initial visible heights\n\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0, react_1.useState)(false);\n  const handleVisibleSlideHeightChange = (0, react_1.useCallback)((slideIndex, height) => {\n    // Use the ref's value since it's always the latest value\n    const latestVisibleHeights = visibleHeightsRef.current;\n    let newVisibleHeights;\n\n    if (height === null) {\n      newVisibleHeights = latestVisibleHeights.filter(slideHeight => slideHeight.slideIndex !== slideIndex);\n    } else {\n      newVisibleHeights = [...latestVisibleHeights, {\n        slideIndex,\n        height\n      }];\n    }\n\n    setVisibleHeights(newVisibleHeights);\n\n    if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n      setInitializedAdaptiveHeight(true);\n    }\n  }, [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]);\n  const frameHeight = (0, react_1.useMemo)(() => {\n    if (adaptiveHeight) {\n      // We want server-side-rendering to render the carousel with non-zero\n      // height. to achieve this, we first set the height to `auto` until\n      // we've received the heights of the visible slides. Then, we switch to\n      // a mode where the frame controls the height.\n      if (!initializedAdaptiveHeight) {\n        return 'auto';\n      }\n\n      const maxHeight = Math.max(0, ...visibleHeights.map(height => height.height));\n      return `${maxHeight}px`;\n    } else {\n      return 'auto';\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight\n  };\n};\n\nexports.useFrameHeight = useFrameHeight;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;AAEA;;;;;;;;;;;;;;;;;AAeO,MAAMA,cAAc,GAAG,CAC5BC,cAD4B,EAE5BC,YAF4B,EAG5BC,UAH4B,KAsB1B;EACF,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,EAAoCC,iBAApC,IACJ,0CAA+B,EAA/B,CADF,CADE,CAIF;;EACA,MAAM,CAACC,yBAAD,EAA4BC,4BAA5B,IACJ,sBAAS,KAAT,CADF;EAGA,MAAMC,8BAA8B,GAAG,yBACrC,CAACC,UAAD,EAAqBC,MAArB,KAA8C;IAC5C;IACA,MAAMC,oBAAoB,GAAGN,iBAAiB,CAACO,OAA/C;IACA,IAAIC,iBAAJ;;IACA,IAAIH,MAAM,KAAK,IAAf,EAAqB;MACnBG,iBAAiB,GAAGF,oBAAoB,CAACG,MAArB,CACjBC,WAAD,IAAiBA,WAAW,CAACN,UAAZ,KAA2BA,UAD1B,CAApB;IAGD,CAJD,MAIO;MACLI,iBAAiB,GAAG,CAAC,GAAGF,oBAAJ,EAA0B;QAAEF,UAAF;QAAcC;MAAd,CAA1B,CAApB;IACD;;IACDN,iBAAiB,CAACS,iBAAD,CAAjB;;IAEA,IACEA,iBAAiB,CAACG,MAAlB,IACAC,IAAI,CAACC,GAAL,CAAShB,UAAT,EAAqBe,IAAI,CAACE,IAAL,CAAUlB,YAAV,CAArB,CAFF,EAGE;MACAM,4BAA4B,CAAC,IAAD,CAA5B;IACD;EACF,CApBoC,EAqBrC,CAACL,UAAD,EAAaE,iBAAb,EAAgCH,YAAhC,EAA8CI,iBAA9C,CArBqC,CAAvC;EAwBA,MAAMe,WAAW,GAAG,qBAAQ,MAAK;IAC/B,IAAIpB,cAAJ,EAAoB;MAClB;MACA;MACA;MACA;MACA,IAAI,CAACM,yBAAL,EAAgC;QAC9B,OAAO,MAAP;MACD;;MAED,MAAMe,SAAS,GAAGJ,IAAI,CAACK,GAAL,CAChB,CADgB,EAEhB,GAAGnB,cAAc,CAACoB,GAAf,CAAoBb,MAAD,IAAYA,MAAM,CAACA,MAAtC,CAFa,CAAlB;MAIA,OAAO,GAAGW,SAAS,IAAnB;IACD,CAdD,MAcO;MACL,OAAO,MAAP;IACD;EACF,CAlBmB,EAkBjB,CAACrB,cAAD,EAAiBM,yBAAjB,EAA4CH,cAA5C,CAlBiB,CAApB;EAoBA,OAAO;IACLK,8BADK;IAELY,WAFK;IAGLd;EAHK,CAAP;AAKD,CA/EM;;AAAMkB,yBAAczB,cAAd","names":["useFrameHeight","adaptiveHeight","slidesToShow","slideCount","visibleHeights","setVisibleHeights","visibleHeightsRef","initializedAdaptiveHeight","setInitializedAdaptiveHeight","handleVisibleSlideHeightChange","slideIndex","height","latestVisibleHeights","current","newVisibleHeights","filter","slideHeight","length","Math","min","ceil","frameHeight","maxHeight","max","map","exports"],"sources":["../../src/hooks/use-frame-height.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}