"use strict";

var _types = require("./types");

var _utils = require("./utils");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

describe('isSlideVisible', function () {
  it.each(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    currentSlide | indexToCheck | slidesToShow | expected\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n  "])), 1, 0, 2, false, 1, 1, 2, true, 1, 2, 2, true, 1, 3, 2, false, 1, 0, 1.5, false, 1, 1, 1.5, true, 1, 2, 1.5, true, 1, 3, 1.5, false, 1.5, 0, 2, false, 1.5, 1, 2, true, 1.5, 2, 2, true, 1.5, 3, 2, true, 1.5, 4, 2, false, 1, 0, 1, false, 1, 1, 1, true, 1, 2, 1, false, 1.5, 0, 1, false, 1.5, 1, 1, true, 1.5, 2, 1, true, 1.5, 3, 1, false)('works with left align ' + '(showing index $currentSlide, check index $indexToCheck, $slidesToShow slidesToShow)', function (_ref) {
    var currentSlide = _ref.currentSlide,
        indexToCheck = _ref.indexToCheck,
        slidesToShow = _ref.slidesToShow,
        expected = _ref.expected;
    expect((0, _utils.isSlideVisible)(currentSlide, indexToCheck, slidesToShow, _types.Alignment.Left)).toEqual(expected);
  });
  it.each(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    currentSlide | indexToCheck | slidesToShow | expected\n    ", "         | ", "        | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "        | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "       | ", "        | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n  "])), 1, -1, 2, false, 1, 0, 2, true, 1, 1, 2, true, 1, 2, 2, false, 1, -1, 1.5, false, 1, 0, 1.5, true, 1, 1, 1.5, true, 1, 2, 1.5, false, 1.5, -1, 2, false, 1.5, 0, 2, true, 1.5, 1, 2, true, 1.5, 2, 2, true, 1.5, 3, 2, false, 1, 0, 1, false, 1, 1, 1, true, 1, 2, 1, false, 1.5, 0, 1, false, 1.5, 1, 1, true, 1.5, 2, 1, true, 1.5, 3, 1, false)('works with right align ' + '(showing index $currentSlide, check index $indexToCheck, $slidesToShow slidesToShow)', function (_ref2) {
    var currentSlide = _ref2.currentSlide,
        indexToCheck = _ref2.indexToCheck,
        slidesToShow = _ref2.slidesToShow,
        expected = _ref2.expected;
    expect((0, _utils.isSlideVisible)(currentSlide, indexToCheck, slidesToShow, _types.Alignment.Right)).toEqual(expected);
  });
  it.each(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    currentSlide | indexToCheck | slidesToShow | expected\n    ", "         | ", "        | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "        | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "         | ", "       | ", "\n    ", "         | ", "        | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "       | ", "        | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "         | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n    ", "       | ", "         | ", "         | ", "\n  "])), 1, -1, 3, false, 1, 0, 3, true, 1, 1, 3, true, 1, 2, 3, true, 1, 3, 3, false, 1, -1, 2.5, false, 1, 0, 2.5, true, 1, 1, 2.5, true, 1, 2, 2.5, true, 1, 3, 2.5, false, 1, -1, 2, false, 1, 0, 2, true, 1, 1, 2, true, 1, 2, 2, true, 1, 3, 2, false, 1.2, -1, 2, false, 1.2, 0, 2, true, 1.2, 1, 2, true, 1.2, 2, 2, true, 1.2, 3, 2, false, 1.7, 0, 2, false, 1.7, 1, 2, true, 1.7, 2, 2, true, 1.7, 3, 2, true, 1.7, 4, 2, false, 1, 0, 1, false, 1, 1, 1, true, 1, 2, 1, false, 1.5, 0, 1, false, 1.5, 1, 1, true, 1.5, 2, 1, true, 1.5, 3, 1, false)('works with center align ' + '(showing index $currentSlide, check index $indexToCheck, $slidesToShow slidesToShow)', function (_ref3) {
    var currentSlide = _ref3.currentSlide,
        indexToCheck = _ref3.indexToCheck,
        slidesToShow = _ref3.slidesToShow,
        expected = _ref3.expected;
    expect((0, _utils.isSlideVisible)(currentSlide, indexToCheck, slidesToShow, _types.Alignment.Center)).toEqual(expected);
  });
});
describe('getNextMoveIndex', function () {
  it.each(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    currentSlide | slideCount | slidesToScroll | expected\n    ", "         | ", "       | ", "           | ", "\n    ", "         | ", "       | ", "           | ", "\n    ", "        | ", "       | ", "           | ", "\n    ", "         | ", "       | ", "           | ", "\n    ", "         | ", "       | ", "           | ", "\n  "])), 1, 3, 2, 3, 1, 2, 2, 3, -1, 2, 1, 0, 1, 1, 1, 2, 1, 2, 1, 2)('does basic calculation with wrapAround=true ' + '(currentSlide $currentSlide, slideCount $slideCount, slidesToScroll $slidesToScroll)', function (_ref4) {
    var currentSlide = _ref4.currentSlide,
        slideCount = _ref4.slideCount,
        slidesToScroll = _ref4.slidesToScroll,
        expected = _ref4.expected;
    var args = [_types.ScrollMode.page, true, currentSlide, slideCount, slidesToScroll, 1];
    expect(_utils.getNextMoveIndex.apply(void 0, args.concat([_types.Alignment.Left]))).toEqual(expected);
    expect(_utils.getNextMoveIndex.apply(void 0, args.concat([_types.Alignment.Right]))).toEqual(expected);
    expect(_utils.getNextMoveIndex.apply(void 0, args.concat([_types.Alignment.Center]))).toEqual(expected);
  });
  it.each(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n    currentSlide | slidesToShow | slidesToScroll | cellAlign   | expected\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "       | ", "         | ", "           | ", "   | ", "\n    ", "       | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "         | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "       | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "         | ", "   | ", "\n    ", "         | ", "       | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "       | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "         | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "       | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "         | ", "  | ", "\n    ", "         | ", "       | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "       | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "         | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "       | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "         | ", " | ", "\n    ", "         | ", "       | ", "           | ", " | ", "\n  "])), 2, 1, 1, 'left', 2, 1, 1, 1, 'left', 2, 1.5, 1, 1, 'left', 2, 1.5, 2, 1, 'left', 1.5, 2, 2, 1, 'left', 2, 1, 2, 1, 'left', 1, 1, 2, 2, 'left', 1, 1, 2, 1.5, 'left', 1, 0, 1, 1, 'left', 1, 0.5, 1, 1, 'left', 1.5, 0, 2, 1, 'left', 1, 0, 2, 2, 'left', 2, 0, 2, 1.5, 'left', 1.5, 0, 1.5, 2, 'left', 2, 2, 1, 1, 'right', 2, 1, 1, 1, 'right', 2, 1.5, 1, 1, 'right', 2, 1, 2, 1, 'right', 2, 1, 2, 2, 'right', 2, 1, 2, 1.5, 'right', 2, 0, 1, 1, 'right', 1, 0.5, 1, 1, 'right', 1.5, 0, 2, 1, 'right', 1, 0, 2, 2, 'right', 2, 0, 2, 1.5, 'right', 1.5, 0, 1.5, 2, 'right', 2, 2, 1, 1, 'center', 2, 1, 1, 1, 'center', 2, 1.5, 1, 1, 'center', 2, 1, 2, 1, 'center', 2, 1, 2, 2, 'center', 2, 1, 2, 1.5, 'center', 2, 0, 1, 1, 'center', 1, 0.5, 1, 1, 'center', 1.5, 0, 2, 1, 'center', 1, 0, 2, 2, 'center', 2, 0, 2, 1.5, 'center', 1.5, 0, 1.5, 2, 'center', 2)('gets correct index when allowing whitespace ' + '(slideIndex $currentSlide, $slidesToShow slidesToShow, $slidesToScroll slidesToScroll, $cellAlign align)', function (_ref5) {
    var currentSlide = _ref5.currentSlide,
        slidesToShow = _ref5.slidesToShow,
        slidesToScroll = _ref5.slidesToScroll,
        cellAlign = _ref5.cellAlign,
        expected = _ref5.expected;
    expect((0, _utils.getNextMoveIndex)(_types.ScrollMode.page, false, currentSlide, 3, slidesToScroll, slidesToShow, cellAlign)).toEqual(expected);
  });
  it.each(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    currentSlide | slidesToShow | slidesToScroll | cellAlign   | expected\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "       | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "         | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "       | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "         | ", "   | ", "\n    ", "         | ", "         | ", "          | ", "   | ", "\n    ", "         | ", "       | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n  "])), 2, 1, 1, 'left', 2, 1, 1, 1, 'left', 2, 1.5, 1, 1, 'left', 2, 1, 2, 1, 'left', 1, 1, 2, 2, 'left', 1, 1, 2, 1.5, 'left', 1, 0, 1, 1, 'left', 1, 0.5, 1, 1, 'left', 1.5, 0, 2, 1, 'left', 1, 0, 2, 2, 'left', 1, 0, 2, 1.5, 'left', 1, 3, 1, 11, 'left', 3, 0, 1.5, 2, 'left', 1.5, 1, 2, 1, 'center', 2, 1, 2, 1, 'right', 2)('gets correct index when avoiding whitespace ' + '(slideIndex $currentSlide, $slidesToShow slidesToShow, $slidesToScroll slidesToScroll, $cellAlign align)', function (_ref6) {
    var currentSlide = _ref6.currentSlide,
        slidesToShow = _ref6.slidesToShow,
        slidesToScroll = _ref6.slidesToScroll,
        cellAlign = _ref6.cellAlign,
        expected = _ref6.expected;
    expect((0, _utils.getNextMoveIndex)(_types.ScrollMode.remainder, false, currentSlide, 3, slidesToScroll, slidesToShow, cellAlign)).toEqual(expected);
  });
});
describe('getPrevMoveIndex', function () {
  it.each(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    currentSlide | slidesToScroll | expected\n    ", "         | ", "           | ", "\n    ", "         | ", "           | ", "\n    ", "        | ", "           | ", "\n  "])), 1, 2, -1, 4, 2, 2, -1, 1, -2)('does basic calculation with wrapAround=true ' + '(currentSlide $currentSlide, slidesToScroll $slidesToScroll)', function (_ref7) {
    var currentSlide = _ref7.currentSlide,
        slidesToScroll = _ref7.slidesToScroll,
        expected = _ref7.expected;
    expect((0, _utils.getPrevMoveIndex)(_types.ScrollMode.page, true, currentSlide, slidesToScroll, 1, _types.Alignment.Left)).toEqual(expected);
  });
  it.each(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n    currentSlide | slidesToShow | slidesToScroll | cellAlign   | expected\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "       | ", "         | ", "           | ", "   | ", "\n    ", "       | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "         | ", "   | ", "\n    ", "         | ", "         | ", "         | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n    ", "         | ", "       | ", "           | ", "   | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "       | ", "         | ", "           | ", "  | ", "\n    ", "       | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "         | ", "  | ", "\n    ", "         | ", "         | ", "         | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "       | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "       | ", "         | ", "           | ", " | ", "\n    ", "       | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "         | ", " | ", "\n    ", "         | ", "         | ", "         | ", " | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "       | ", "           | ", " | ", "\n  "])), 0, 1, 1, 'left', 0, 1, 1, 1, 'left', 0, 1.5, 1, 1, 'left', 0.5, 1.5, 2, 1, 'left', 0.5, 1, 2, 1, 'left', 0, 1, 2, 2, 'left', 0, 1, 2, 1.5, 'left', 0, 2, 2, 1.5, 'left', 0.5, 2, 2, 2, 'left', 0, 2, 1.5, 2, 'left', 0, 0, 1, 1, 'right', 0, 1, 1, 1, 'right', 0, 1.5, 1, 1, 'right', 0.5, 1.5, 2, 1, 'right', 0.5, 1, 2, 1, 'right', 1, 1, 2, 2, 'right', 1, 1, 2, 1.5, 'right', 1, 2, 2, 1.5, 'right', 0.5, 2, 2, 2, 'right', 0, 2, 1.5, 2, 'right', 0, 0, 1, 1, 'center', 0, 1, 1, 1, 'center', 0, 1.5, 1, 1, 'center', 0.5, 1.5, 2, 1, 'center', 0.5, 1, 2, 1, 'center', 0, 1, 2, 2, 'center', 0, 1, 2, 1.5, 'center', 0, 2, 2, 1.5, 'center', 0.5, 2, 2, 2, 'center', 0, 2, 1.5, 2, 'center', 0)('gets correct index when allowing whitespace ' + '(slideIndex $currentSlide, $slidesToShow slidesToShow, $slidesToScroll slidesToScroll, $cellAlign align)', function (_ref8) {
    var currentSlide = _ref8.currentSlide,
        slidesToShow = _ref8.slidesToShow,
        slidesToScroll = _ref8.slidesToScroll,
        cellAlign = _ref8.cellAlign,
        expected = _ref8.expected;
    expect((0, _utils.getPrevMoveIndex)(_types.ScrollMode.page, false, currentSlide, slidesToScroll, slidesToShow, cellAlign)).toEqual(expected);
  });
  it.each(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n    currentSlide | slidesToShow | slidesToScroll | cellAlign   | expected\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "       | ", "         | ", "           | ", "  | ", "\n    ", "       | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "         | ", "  | ", "\n    ", "         | ", "         | ", "         | ", "  | ", "\n    ", "         | ", "         | ", "           | ", "  | ", "\n    ", "         | ", "       | ", "           | ", "  | ", "\n    ", "         | ", "         | ", "           | ", " | ", "\n    ", "         | ", "         | ", "           | ", "   | ", "\n  "])), 0, 1, 1, 'right', 0, 1, 1, 1, 'right', 0, 1.5, 1, 1, 'right', 0.5, 1.5, 2, 1, 'right', 1, 1, 2, 1, 'right', 1, 1, 2, 2, 'right', 1, 1, 2, 1.5, 'right', 1, 2, 2, 1.5, 'right', 1, 2, 2, 2, 'right', 1, 2, 1.5, 2, 'right', 0.5, 1, 2, 1, 'center', 0, 1, 2, 1, 'left', 0)('gets correct index when avoiding whitespace ' + '(slideIndex $currentSlide, $slidesToShow slidesToShow, $slidesToScroll slidesToScroll, $cellAlign align)', function (_ref9) {
    var currentSlide = _ref9.currentSlide,
        slidesToShow = _ref9.slidesToShow,
        slidesToScroll = _ref9.slidesToScroll,
        cellAlign = _ref9.cellAlign,
        expected = _ref9.expected;
    expect((0, _utils.getPrevMoveIndex)(_types.ScrollMode.remainder, false, currentSlide, slidesToScroll, slidesToShow, cellAlign)).toEqual(expected);
  });
});
describe('getBoundedIndex', function () {
  it.each(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n    rawIndex | slideCount | expected\n    ", "     | ", "       | ", "\n    ", "     | ", "       | ", "\n    ", "     | ", "       | ", "\n    ", "     | ", "       | ", "\n    ", "     | ", "       | ", "\n    ", "    | ", "       | ", "\n    ", "    | ", "       | ", "\n    ", "    | ", "       | ", "\n    ", "    | ", "       | ", "\n    ", "    | ", "       | ", "\n    ", "    | ", "       | ", "\n    ", "  | ", "       | ", "\n  "])), 0, 1, 0, 1, 2, 1, 2, 2, 0, 3, 2, 1, 4, 2, 0, -1, 2, 1, -2, 2, 0, -2, 3, 1, -3, 3, 0, -6, 3, 0, -7, 3, 2, -7.5, 3, 1.5)('gets the right index when bounds applied ' + '(rawIndex $rawIndex, slideCount $slideCount)', function (_ref10) {
    var rawIndex = _ref10.rawIndex,
        slideCount = _ref10.slideCount,
        expected = _ref10.expected;
    expect((0, _utils.getBoundedIndex)(rawIndex, slideCount)).toEqual(expected);
  });
});